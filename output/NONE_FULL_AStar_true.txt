@Test
public void testAStarTest0() {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
        org.junit.Assert.assertEquals(net.mooctest.Graph.TYPE.UNDIRECTED, graph_TYPE0);
}
---------------------------------------------------
@Test
public void testAStarTest1() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1361), graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest2() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1361), graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(1, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest3() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1361), graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals((-1361), graph_Edge1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest4() {
        final UndirectedGraph undirected = new UndirectedGraph();
        final Graph.Vertex<Integer> start = undirected.v1;
        final Graph.Vertex<Integer> end = undirected.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(undirected.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealUndirectedPath(undirected).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}
---------------------------------------------------
@Test
public void testAStarTest5() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        boolean boolean0 = graph_CostVertexPair0.equals("");
        org.junit.Assert.assertEquals(2124, graph_CostVertexPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest6() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        boolean boolean0 = graph_CostVertexPair0.equals("");
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest7() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        boolean boolean0 = graph_CostVertexPair0.equals("");
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest8() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest9() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(2124, graph_CostVertexPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest10() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest11() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex0);
        org.junit.Assert.assertEquals(2874, graph_Edge1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest12() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex0);
        org.junit.Assert.assertNotNull(graph_Edge1);
}
---------------------------------------------------
@Test
public void testAStarTest13() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex0);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest14() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest15() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex0);
        org.junit.Assert.assertTrue(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest16() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex0);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest17() {
        assertEquals(out, (systemOutRule.getLog()));
}
---------------------------------------------------
@Test
public void testAStarTest18() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>(") ", 3838);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2518, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_Edge0.getFromVertex();
        org.junit.Assert.assertEquals(3838, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest19() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>(") ", 3838);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2518, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_Edge0.getFromVertex();
        org.junit.Assert.assertEquals(2518, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest20() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2147483645, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost(0);
        graph_Vertex1.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = aStar0.distanceBetween(graph_Vertex1, graph_Vertex2);
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest21() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
        org.junit.Assert.assertEquals("", string0);
}
---------------------------------------------------
@Test
public void testAStarTest22() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn(0, 0).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest23() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        assertEquals(0, graph.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest24() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        assertTrue(graph.equals(graph));
}
---------------------------------------------------
@Test
public void testAStarTest25() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
}
---------------------------------------------------
@Test
public void testAStarTest26() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        assertFalse(graph2.equals(graph));
}
---------------------------------------------------
@Test
public void testAStarTest27() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
}
---------------------------------------------------
@Test
public void testAStarTest28() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
}
---------------------------------------------------
@Test
public void testAStarTest29() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
}
---------------------------------------------------
@Test
public void testAStarTest30() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        assertEquals(24, graph2.getEdges().size());
}
---------------------------------------------------
@Test
public void testAStarTest31() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        assertEquals(-1, vertex.compareTo(vertex1));
}
---------------------------------------------------
@Test
public void testAStarTest32() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        assertEquals(1, vertex1.compareTo(vertex));
}
---------------------------------------------------
@Test
public void testAStarTest33() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        assertTrue(edge.equals(edge));
}
---------------------------------------------------
@Test
public void testAStarTest34() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        assertTrue(!edge.equals(null));
}
---------------------------------------------------
@Test
public void testAStarTest35() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
}
---------------------------------------------------
@Test
public void testAStarTest36() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        assertFalse(edge2.equals(edge));
}
---------------------------------------------------
@Test
public void testAStarTest37() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
}
---------------------------------------------------
@Test
public void testAStarTest38() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
}
---------------------------------------------------
@Test
public void testAStarTest39() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        assertEquals(1, edge2.compareTo(edge));
}
---------------------------------------------------
@Test
public void testAStarTest40() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        assertFalse(vertex.equals(vertex1));
}
---------------------------------------------------
@Test
public void testAStarTest41() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        assertEquals(100440, pathpair.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest42() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        assertTrue(pathpair.equals(pathpair));
}
---------------------------------------------------
@Test
public void testAStarTest43() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
}
---------------------------------------------------
@Test
public void testAStarTest44() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        assertTrue(!pathpair1.equals(pathpair));
}
---------------------------------------------------
@Test
public void testAStarTest45() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        assertFalse(costPair.equals(costPair1));
}
---------------------------------------------------
@Test
public void testAStarTest46() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertFalse(costVert.equals(null));
}
---------------------------------------------------
@Test
public void testAStarTest47() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertFalse(costVert.equals(new CostVertexPair<Integer>(3, new Vertex<Integer>(3))));
}
---------------------------------------------------
@Test
public void testAStarTest48() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertFalse(costVert.equals(new CostVertexPair<Integer>(2, new Vertex<Integer>(3))));
}
---------------------------------------------------
@Test
public void testAStarTest49() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertTrue(costVert.equals(costVert));
}
---------------------------------------------------
@Test
public void testAStarTest50() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertEquals(3844, costVert.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest51() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            assertFalse(costVert.equals(null));
}
---------------------------------------------------
@Test
public void testAStarTest52() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            assertEquals(3844, costVert.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest53() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
            assertEquals("vertex cannot be NULL.", e.getMessage());
}
---------------------------------------------------
@Test
public void testAStarTest54() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        assertEquals(62, costVert.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest55() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        assertEquals(12, graph.getEdges().size());
}
---------------------------------------------------
@Test
public void testAStarTest56() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        assertEquals(14, graph.getEdges().size());
}
---------------------------------------------------
@Test
public void testAStarTest57() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        assertEquals(2, edges.size());
}
---------------------------------------------------
@Test
public void testAStarTest58() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        assertEquals(2, edges.get(0).getCost());
}
---------------------------------------------------
@Test
public void testAStarTest59() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
}
---------------------------------------------------
@Test
public void testAStarTest60() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        assertEquals(3, edges.size());
}
---------------------------------------------------
@Test
public void testAStarTest61() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        assertEquals(9, edges.get(0).getCost());
}
---------------------------------------------------
@Test
public void testAStarTest62() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        assertEquals(186, vertex.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest63() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        assertNull(edges);
}
---------------------------------------------------
@Test
public void testAStarTest64() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
}
---------------------------------------------------
@Test
public void testAStarTest65() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        assertEquals(10, edges.get(0).getCost());
}
---------------------------------------------------
@Test
public void testAStarTest66() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        assertEquals(1787460, edge.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest67() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        assertEquals(0, graph.getEdges().get(0).hashCode() * graph.getVertices().get(0).hashCode() * (graph.getVertices().size() + graph.getEdges().size() + graph.getType().hashCode()) * 31 - graph.hashCode());
}
---------------------------------------------------
@Test
public void testAStarTest68() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
}
---------------------------------------------------
@Test
public void testAStarTest69() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        assertEquals(4, edges.size());
}
---------------------------------------------------
@Test
public void testAStarTest70() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        assertEquals(1, edges.get(0).getCost());
}
---------------------------------------------------
@Test
public void testAStarTest71() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        assertEquals(1, edges.size());
}
---------------------------------------------------
@Test
public void testAStarTest72() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
}
---------------------------------------------------
@Test
public void testAStarTest73() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
}
---------------------------------------------------
@Test
public void testAStarTest74() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
}
---------------------------------------------------
@Test
public void testAStarTest75() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v3);
        assertEquals(0, edges.size());
}
---------------------------------------------------
@Test
public void testAStarTest76() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "Value=8 weight=0\n", graph.toString());
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
                "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v3);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v3);
}
---------------------------------------------------
@Test
public void testAStarTest77() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(list0, list1);
        org.junit.Assert.assertTrue(graph1.equals(((java.lang.Object) (graph0))));
}
---------------------------------------------------
@Test
public void testAStarTest78() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-14), int0);
}
---------------------------------------------------
@Test
public void testAStarTest79() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1032), graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest80() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest81() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        org.junit.Assert.assertEquals((-2526), int0);
}
---------------------------------------------------
@Test
public void testAStarTest82() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge1.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals((-1), graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest83() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge1.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest84() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex1);
        org.junit.Assert.assertEquals(799, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest85() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex1);
        org.junit.Assert.assertEquals((-1881), graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest86() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.junit.Assert.assertTrue(graph1.equals(((java.lang.Object) (graph0))));
}
---------------------------------------------------
@Test
public void testAStarTest87() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest88() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
        org.junit.Assert.assertEquals((-1), int0);
}
---------------------------------------------------
@Test
public void testAStarTest89() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
        org.junit.Assert.assertEquals(java.lang.Integer.MAX_VALUE, graph_CostVertexPair1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest90() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        org.junit.Assert.assertFalse(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}
---------------------------------------------------
@Test
public void testAStarTest91() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest92() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.Integer>(((java.lang.Integer) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex2);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest93() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.Integer>(((java.lang.Integer) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex2);
        org.junit.Assert.assertEquals(0, graph_Vertex2.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest94() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.Integer>(((java.lang.Integer) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex2);
        org.junit.Assert.assertNull(graph_Edge1);
}
---------------------------------------------------
@Test
public void testAStarTest95() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest96() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest97() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertNull(graph_Edge1);
}
---------------------------------------------------
@Test
public void testAStarTest98() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest99() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest100() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        java.lang.String string0 = graph_Vertex0.toString();
        org.junit.Assert.assertEquals("Value= weight=0\n\t[ (0) ] -> [ (0) ] = -895\n", string0);
}
---------------------------------------------------
@Test
public void testAStarTest101() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
        boolean boolean0 = graph0.equals(graph1);
        org.junit.Assert.assertTrue(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest102() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        graph_Vertex2.addEdge(graph_Edge1);
        org.junit.Assert.assertEquals((-4095), graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest103() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        graph_Vertex2.addEdge(graph_Edge1);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertEquals((-4095), graph_Vertex2.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest104() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        graph_Vertex2.addEdge(graph_Edge1);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertEquals((-1), int0);
}
---------------------------------------------------
@Test
public void testAStarTest105() {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>(graph_TYPE0);
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
        boolean boolean0 = graph1.equals(graph0);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest106() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>((-2879), list0);
        java.lang.Object object0 = new java.lang.Object();
        boolean boolean0 = graph_CostPathPair0.equals(object0);
        org.junit.Assert.assertEquals((-2879), graph_CostPathPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest107() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>((-2879), list0);
        java.lang.Object object0 = new java.lang.Object();
        boolean boolean0 = graph_CostPathPair0.equals(object0);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest108() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("UK4slV]YrZ' jXMmb");
        int int0 = graph_Vertex0.getWeight();
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest109() {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-2761));
        boolean boolean0 = graph_Vertex0.equals(((java.lang.Object) (null)));
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest110() {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-2761));
        boolean boolean0 = graph_Vertex0.equals(((java.lang.Object) (null)));
        org.junit.Assert.assertEquals((-2761), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest111() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2363, graph_Vertex0);
        int int0 = graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(2363, graph_CostVertexPair1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest112() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2363, graph_Vertex0);
        int int0 = graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest113() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2363, graph_Vertex0);
        int int0 = graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest114() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("(", 928);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest115() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("(", 928);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest116() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("(", 928);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(928, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest117() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        org.junit.Assert.assertTrue(graph_Edge1.equals(((java.lang.Object) (graph_Edge0))));
}
---------------------------------------------------
@Test
public void testAStarTest118() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest119() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        java.lang.String string0 = graph_CostVertexPair0.toString();
        org.junit.Assert.assertEquals("9c3o$8-?g| (-1)  cost=-1\n", string0);
}
---------------------------------------------------
@Test
public void testAStarTest120() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-442)).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(2, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest121() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-442)).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals((-442), int0);
}
---------------------------------------------------
@Test
public void testAStarTest122() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(16, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(graph_Edge0);
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);
        org.junit.Assert.assertTrue(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest123() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = graph_Edge0.getToVertex();
        org.junit.Assert.assertEquals(2363, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest124() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = graph_Edge0.getToVertex();
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest125() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        org.junit.Assert.assertTrue(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}
---------------------------------------------------
@Test
public void testAStarTest126() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex0);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest127() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex2, graph_Vertex1);
        graph_Vertex1.addEdge(graph_Edge2);
        org.junit.Assert.assertFalse(graph_Vertex2.equals(((java.lang.Object) (graph_Vertex1))));
}
---------------------------------------------------
@Test
public void testAStarTest128() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex2, graph_Vertex1);
        graph_Vertex1.addEdge(graph_Edge2);
        graph_Vertex2.addEdge(graph_Edge1);
        graph_Vertex1.getEdge(graph_Vertex2);
        org.junit.Assert.assertTrue(graph_Vertex2.equals(((java.lang.Object) (graph_Vertex1))));
}
---------------------------------------------------
@Test
public void testAStarTest129() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
        org.junit.Assert.assertNull(list0);
}
---------------------------------------------------
@Test
public void testAStarTest130() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertTrue(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest131() {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-2761));
        graph_Vertex0.setWeight(2370);
        org.junit.Assert.assertEquals(2370, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest132() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));
        org.junit.Assert.assertEquals((-1361), graph_CostVertexPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest133() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        java.lang.String string0 = graph_Vertex0.toString();
        org.junit.Assert.assertEquals("Value=0 weight=2363\n\t[ 0(2363) ] -> [ 0(2363) ] = 2874\n", string0);
}
---------------------------------------------------
@Test
public void testAStarTest134() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertNotNull(list0);
}
---------------------------------------------------
@Test
public void testAStarTest135() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertEquals(1, list0.size());
}
---------------------------------------------------
@Test
public void testAStarTest136() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertFalse(list0.isEmpty());
}
---------------------------------------------------
@Test
public void testAStarTest137() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0, list0, list1);
        org.junit.Assert.assertEquals(net.mooctest.Graph.TYPE.DIRECTED, graph1.getType());
}
---------------------------------------------------
@Test
public void testAStarTest138() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals((-27), graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest139() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertEquals((-27), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest140() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest141() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest142() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest143() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest144() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-1460), graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest145() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-1460), graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest146() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-1460), graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1460), graph_Edge1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest147() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2155, list0);
        java.lang.String string0 = graph_CostPathPair0.toString();
        org.junit.Assert.assertEquals("Cost = 2155\n", string0);
}
---------------------------------------------------
@Test
public void testAStarTest148() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();
        org.junit.Assert.assertEquals((-1), int0);
}
---------------------------------------------------
@Test
public void testAStarTest149() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest150() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        org.junit.Assert.assertEquals(java.lang.Integer.MAX_VALUE, int0);
}
---------------------------------------------------
@Test
public void testAStarTest151() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_CostVertexPair0.getVertex();
        org.junit.Assert.assertEquals((-1), graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest152() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_CostVertexPair0.getVertex();
        org.junit.Assert.assertEquals((-1), graph_CostVertexPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest153() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2536));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2579), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertEquals(1, list0.size());
}
---------------------------------------------------
@Test
public void testAStarTest154() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2536));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2579), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertNotNull(list0);
}
---------------------------------------------------
@Test
public void testAStarTest155() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2, graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertNotNull(list0);
}
---------------------------------------------------
@Test
public void testAStarTest156() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2, graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertEquals(2, list0.size());
}
---------------------------------------------------
@Test
public void testAStarTest157() {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest158() {
        final DirectedGraph directed = new DirectedGraph();
        final Graph.Vertex<Integer> start = directed.v1;
        final Graph.Vertex<Integer> end = directed.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(directed.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealDirectedPath(directed).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}
---------------------------------------------------
@Test
public void testAStarTest159() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex1.compareTo(graph_Vertex0);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest160() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex1.compareTo(graph_Vertex0);
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest161() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex1.compareTo(graph_Vertex0);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest162() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-2763));
        int int0 = aStar0.heuristicCostEstimate(graph_Vertex0, graph_Vertex0);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest163() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge1);
        graph_Vertex1.addEdge(graph_Edge1);
        graph_Vertex2.addEdge(graph_Edge2);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertTrue(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex2))));
}
---------------------------------------------------
@Test
public void testAStarTest164() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge1);
        graph_Vertex1.addEdge(graph_Edge1);
        graph_Vertex2.addEdge(graph_Edge2);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest165() {
        java.lang.Integer integer0 = new java.lang.Integer(2);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2);
        net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator> graph_Vertex1 = new net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator>(unaryExpr_Operator0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest166() {
        java.lang.Integer integer0 = new java.lang.Integer(2);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2);
        net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator> graph_Vertex1 = new net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator>(unaryExpr_Operator0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest167() {
        java.lang.Integer integer0 = new java.lang.Integer(2);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2);
        net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator> graph_Vertex1 = new net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator>(unaryExpr_Operator0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertEquals(2, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest168() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        java.lang.String string0 = graph_Edge0.toString();
        org.junit.Assert.assertEquals("[ null(0) ] -> [ null(0) ] = 2\n", string0);
}
---------------------------------------------------
@Test
public void testAStarTest169() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        org.junit.Assert.assertTrue(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}
---------------------------------------------------
@Test
public void testAStarTest170() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
        org.junit.Assert.assertFalse(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}
---------------------------------------------------
@Test
public void testAStarTest171() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest172() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest173() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
        org.junit.Assert.assertTrue(list0.isEmpty());
}
---------------------------------------------------
@Test
public void testAStarTest174() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1), graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest175() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1), int0);
}
---------------------------------------------------
@Test
public void testAStarTest176() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2874, graph_Edge1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest177() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest178() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2363, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest179() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>((-1), list0);
        graph_CostPathPair0.getPath();
        org.junit.Assert.assertEquals((-1), graph_CostPathPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest180() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, int0);
}
---------------------------------------------------
@Test
public void testAStarTest181() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge0.setCost(2146);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2146, graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest182() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge0.setCost(2146);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest183() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertTrue(boolean0);
}
---------------------------------------------------
@Test
public void testAStarTest184() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1), int0);
}
---------------------------------------------------
@Test
public void testAStarTest185() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest186() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest187() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
        org.junit.Assert.assertEquals(0, graph_CostPathPair0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest188() {
        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2294);
        java.lang.Integer integer1 = new java.lang.Integer(799);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, 1);
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(1, int0);
}
---------------------------------------------------
@Test
public void testAStarTest189() {
        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2294);
        java.lang.Integer integer1 = new java.lang.Integer(799);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, 1);
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(1, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest190() {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        java.lang.Integer integer1 = new java.lang.Integer(980);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, (-2761));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest191() {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        java.lang.Integer integer1 = new java.lang.Integer(980);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, (-2761));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1), int0);
}
---------------------------------------------------
@Test
public void testAStarTest192() {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        java.lang.Integer integer1 = new java.lang.Integer(980);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, (-2761));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-2761), graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest193() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.getCost();
        org.junit.Assert.assertEquals(783, graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest194() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.getCost();
        org.junit.Assert.assertEquals(799, int0);
}
---------------------------------------------------
@Test
public void testAStarTest195() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals((-1), graph_Edge0.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest196() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertNull(graph_Edge1);
}
---------------------------------------------------
@Test
public void testAStarTest197() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest198() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals((-1361), graph_Vertex0.getWeight());
}
---------------------------------------------------
@Test
public void testAStarTest199() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-1009), 21000).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1009), int0);
}
---------------------------------------------------
@Test
public void testAStarTest200() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-1009), 21000).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        int int1 = graph_Edge1.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(21000, int1);
}
---------------------------------------------------
@Test
public void testAStarTest201() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge1.setCost(2269);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2269, graph_Edge1.getCost());
}
---------------------------------------------------
@Test
public void testAStarTest202() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge1.setCost(2269);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}
---------------------------------------------------

