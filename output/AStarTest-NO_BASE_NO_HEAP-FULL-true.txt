@org.junit.Test(timeout = 4000)
public void testAStarTest0() {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
        org.junit.Assert.assertEquals(net.mooctest.Graph.TYPE.UNDIRECTED, graph_TYPE0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest1() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1361), graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest2() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1361), graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(1, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest3() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1361), graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals((-1361), graph_Edge1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest4() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        org.dom4j.QName qName0 = org.dom4j.QName.get("[ net.mooctest.Graph$CostVertexPair(0) ] -> [ net.mooctest.Graph$CostVertexPair(0) ] = 2482\n", "i");
        java.lang.Object object0 = new java.lang.Object();
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement(qName0, object0);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        org.dom4j.bean.BeanAttributeList beanAttributeList0 = new org.dom4j.bean.BeanAttributeList(beanElement0);
        org.dom4j.bean.BeanMetaData beanMetaData0 = org.evosuite.shaded.org.mockito.Mockito.mock(org.dom4j.bean.BeanMetaData.class, new org.evosuite.runtime.ViolatedAssumptionAnswer());
        org.evosuite.shaded.org.mockito.Mockito.doReturn(0).when(beanMetaData0).attributeCount();
        org.dom4j.bean.BeanAttributeList beanAttributeList1 = new org.dom4j.bean.BeanAttributeList(beanElement0, beanMetaData0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0, beanAttributeList0, beanAttributeList1);
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
            org.junit.Assert.fail("Expecting exception: ClassCastException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest5() {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    @org.junit.Test(timeout = 4000)

    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
            //
    }
    }

        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
        int int0 = graph_Edge0.getCost();
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
        final HashMap<Vertex<Integer>, CostPathPair<Integer>> idealUndirectedPath = new HashMap<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>>();
            final List<Graph.Edge<Integer>> list = new ArrayList<Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_6);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v6, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_6);
            list.add(new Graph.Edge<Integer>(9, undirected.v6, undirected.v5));
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v5, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v3, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_4);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v4, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_2);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v2, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v1, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_7);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v7, path);
            final int cost = 1;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_8);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v8, path);
        return idealUndirectedPath;
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        final UndirectedGraph undirected = new UndirectedGraph();
        final Graph.Vertex<Integer> start = undirected.v1;
        final Graph.Vertex<Integer> end = undirected.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(undirected.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealUndirectedPath(undirected).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest6() {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    @org.junit.Test(timeout = 4000)

    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
            //
    }
    }

        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
        int int0 = graph_Edge0.getCost();
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
        final HashMap<Vertex<Integer>, CostPathPair<Integer>> idealUndirectedPath = new HashMap<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>>();
            final List<Graph.Edge<Integer>> list = new ArrayList<Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_6);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v6, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_6);
            list.add(new Graph.Edge<Integer>(9, undirected.v6, undirected.v5));
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v5, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v3, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_4);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v4, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_2);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v2, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v1, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_7);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v7, path);
            final int cost = 1;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_8);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v8, path);
        return idealUndirectedPath;
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        final UndirectedGraph undirected = new UndirectedGraph();
        final Graph.Vertex<Integer> start = undirected.v1;
        final Graph.Vertex<Integer> end = undirected.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(undirected.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealUndirectedPath(undirected).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest7() {

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }
    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
            //
            // no message in exception (getMessage() returned null)
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    @org.junit.Test(timeout = 4000)

    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
            //
    }
    }

        graph_CostPathPair0.getPath();
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
    }
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    @org.junit.Test(timeout = 4000)
        int int0 = graph_Edge0.getCost();
    }
        try {
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
        final HashMap<Vertex<Integer>, CostPathPair<Integer>> idealUndirectedPath = new HashMap<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>>();
            final List<Graph.Edge<Integer>> list = new ArrayList<Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_6);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v6, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_6);
            list.add(new Graph.Edge<Integer>(9, undirected.v6, undirected.v5));
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v5, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v3, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_3);
            list.add(undirected.e3_4);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v4, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_2);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v2, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v1, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_7);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v7, path);
            final int cost = 1;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(undirected.e1_8);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealUndirectedPath.put(undirected.v8, path);
        return idealUndirectedPath;
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        final UndirectedGraph undirected = new UndirectedGraph();
        final Graph.Vertex<Integer> start = undirected.v1;
        final Graph.Vertex<Integer> end = undirected.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(undirected.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealUndirectedPath(undirected).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest8() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        boolean boolean0 = graph_CostVertexPair0.equals("");
        org.junit.Assert.assertEquals(2124, graph_CostVertexPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest9() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        boolean boolean0 = graph_CostVertexPair0.equals("");
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest10() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        boolean boolean0 = graph_CostVertexPair0.equals("");
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest11() {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement(((org.dom4j.QName) (null)), graph0);
        org.dom4j.bean.BeanAttributeList beanAttributeList0 = new org.dom4j.bean.BeanAttributeList(beanElement0);
            graph1 = new net.mooctest.Graph<java.lang.String>(beanAttributeList0, beanAttributeList0);
            org.junit.Assert.fail("Expecting exception: ClassCastException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest12() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest13() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(2124, graph_CostVertexPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest14() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest15() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex0);
        org.junit.Assert.assertEquals(2874, graph_Edge1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest16() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex0);
        org.junit.Assert.assertNotNull(graph_Edge1);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest17() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex0);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest18() {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest19() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest20() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex0);
        org.junit.Assert.assertTrue(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest21() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex0);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest22() {
        assertEquals(out, (systemOutRule.getLog()));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest23() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>(") ", 3838);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2518, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_Edge0.getFromVertex();
        org.junit.Assert.assertEquals(3838, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest24() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>(") ", 3838);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2518, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_Edge0.getFromVertex();
        org.junit.Assert.assertEquals(2518, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest25() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2147483645, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost(0);
        graph_Vertex1.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = aStar0.distanceBetween(graph_Vertex1, graph_Vertex2);
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest26() {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
        org.junit.Assert.assertEquals("", string0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest27() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn(0, 0).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
}

@org.junit.Test(timeout = 4000)
public void testAStarTest28() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        assertEquals(0, graph.hashCode());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest29() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        assertTrue(graph.equals(graph));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest30() {
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        assertEquals("Value=1 weight=0\n" + "\t[ 1(0) ] -> [ 2(0) ] = 7\n" + "\t[ 1(0) ] -> [ 3(0) ] = 9\n" + "\t[ 1(0) ] -> [ 6(0) ] = 14\n" + "\t[ 1(0) ] -> [ 8(0) ] = 30\n" + "Value=2 weight=0\n" + "\t[ 2(0) ] -> [ 3(0) ] = 10\n" + "\t[ 2(0) ] -> [ 4(0) ] = 15\n" + "Value=3 weight=0\n" + "\t[ 3(0) ] -> [ 4(0) ] = 11\n" + "\t[ 3(0) ] -> [ 6(0) ] = 2\n" + "Value=4 weight=0\n" + "\t[ 4(0) ] -> [ 5(0) ] = 6\n" + "\t[ 4(0) ] -> [ 7(0) ] = 16\n" + "Value=5 weight=0\n" + "Value=6 weight=0\n" + "\t[ 6(0) ] -> [ 5(0) ] = 9\n" + "\t[ 6(0) ] -> [ 8(0) ] = 14\n" + "Value=7 weight=0\n" + "Value=8 weight=0\n", graph.toString());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest31() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        assertFalse(graph2.equals(graph));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest32() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        assertFalse(graph2.equals(graph));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest33() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        assertFalse(graph2.equals(graph));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest34() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        assertFalse(graph2.equals(graph));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest35() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        assertEquals(24, graph2.getEdges().size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest36() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        assertEquals(-1, vertex.compareTo(vertex1));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest37() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        assertEquals(1, vertex1.compareTo(vertex));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest38() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        assertTrue(edge.equals(edge));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest39() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        assertTrue(!edge.equals(null));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest40() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        assertFalse(edge2.equals(edge));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest41() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        assertFalse(edge2.equals(edge));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest42() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        assertFalse(edge2.equals(edge));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest43() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        assertEquals(1, edge2.compareTo(edge));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest44() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        assertFalse(vertex.equals(vertex1));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest45() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        assertEquals(100440, pathpair.hashCode());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest46() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        assertTrue(pathpair.equals(pathpair));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest47() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        assertEquals("Cost = 20\n" + "\t[ 1(0) ] -> [ 3(0) ] = 9\n" + "\t[ 3(0) ] -> [ 6(0) ] = 2\n" + "\t[ 6(0) ] -> [ 5(0) ] = 9\n", pathpair.toString());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest48() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        assertTrue(!pathpair1.equals(pathpair));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest49() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        assertFalse(costPair.equals(costPair1));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest50() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertFalse(costVert.equals(null));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest51() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertFalse(costVert.equals(new CostVertexPair<Integer>(3, new Vertex<Integer>(3))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest52() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertFalse(costVert.equals(new CostVertexPair<Integer>(2, new Vertex<Integer>(3))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest53() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertTrue(costVert.equals(costVert));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest54() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
        assertEquals(3844, costVert.hashCode());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest55() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            assertFalse(costVert.equals(null));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest56() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            assertEquals(3844, costVert.hashCode());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest57() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            assertEquals("vertex cannot be NULL.", e.getMessage());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest58() {
        graph_CostPathPair0.getPath();
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            assertEquals("vertex cannot be NULL.", e.getMessage());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest59() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest60() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest61() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest62() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest63() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest64() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest65() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest66() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest67() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest68() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest69() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest70() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        assertEquals(4, edges.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest71() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        assertEquals(1, edges.get(0).getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest72() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        assertEquals(1, edges.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest73() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        assertEquals(1, edges.get(0).getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest74() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        assertEquals(2, edges.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest75() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        assertEquals(2, edges.get(0).getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest76() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
        assertEquals(2, edges.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest77() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
        assertEquals(9, edges.get(0).getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest78() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v3);
        assertEquals(0, edges.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest79() {

            return throwable.getClass().isAssignableFrom(this.expectedType) && throwable.getMessage().contains(this.expectedCause);
        }
        }
    }
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        field.setAccessible(true);
        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        return field;
    }

    }

    @Before
    public void handleBefore() {
        systemErrRule.clearLog();
        systemOutRule.clearLog();
    }
    public void AStar_ESTesttest04tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
    }

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
    public void AStar_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }

    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
    public void AStar_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("i/1q5P`UrB1C%/,f(!", (-5262));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    }
    public void AStar_ESTesttest11tokenhaha() throws java.lang.Throwable { // 正常
    }
            //
            // no message in exception (getMessage() returned null)
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest09tokenhaha() throws java.lang.Throwable { // 这个也是切漏了，有些变量没切进来
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest07tokenhaha() throws java.lang.Throwable { // 到空点返回空，漏变量。使用的变量（点）切出来了，被使用的（边）没切出来。但实际上被使用的变量也改变了内部存储
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
    }

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest57tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>();
        net.mooctest.Graph.TYPE graph_TYPE0 = graph0.getType();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest56tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    public void Graph_ESTesttest11tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest55tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
        } catch (java.lang.NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest54tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
    }

        graph_CostPathPair0.getPath();
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            graph_CostVertexPair0.compareTo(((net.mooctest.Graph.CostVertexPair<java.lang.Integer>) (null)));
        } catch (java.lang.NullPointerException e) {
            // CostVertexPair 'p' must be non-NULL.
            //
        }
    }
    public void Graph_ESTesttest18tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest17tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest16tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = null;
        try {
            // path cannot be NULL.
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostPathPair", e);
        }
    }
    }
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));

    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
    }

    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);

    public void Graph_ESTesttest47tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));

    public void Graph_ESTesttest02tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);

    public void Graph_ESTesttest46tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
    }
    @org.junit.Test(timeout = 4000)
    }

    @org.junit.Test(timeout = 4000)
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
    public void Graph_ESTesttest23tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        boolean boolean0 = graph_CostVertexPair0.equals("");
    }

    public void Graph_ESTesttest20tokenhaha() throws java.lang.Throwable {
            // Both 'to' and 'from' vertices need to be non-NULL.
        int int0 = graph_Edge0.getCost();
    }
        try {
            graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        } catch (java.lang.ClassCastException e) {
            //
            // org.dom4j.bean.BeanAttribute cannot be cast to net.mooctest.Graph$Vertex
        }
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));

    // Ideal directed with negative weight path
    private Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> getIdealDirectedNegWeight(DirectedWithNegativeWeights directedWithNegWeights) {
        {
            list.add(directedWithNegWeights.e1_4);
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        }
    /*
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
                "\t[ 1(0) ] -> [ 6(0) ] = 14\n" +
                "Value=2 weight=0\n" +
                "\t[ 2(0) ] -> [ 3(0) ] = 10\n" +
                "\t[ 2(0) ] -> [ 4(0) ] = 15\n" +
                "\t[ 3(0) ] -> [ 4(0) ] = 11\n" +
                "Value=4 weight=0\n" +
                "Value=5 weight=0\n" +
                "\t[ 6(0) ] -> [ 8(0) ] = 14\n" +
                "Value=7 weight=0\n" +
                "Value=8 weight=0\n", graph.toString());*/
        // 改成一行
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
        Field vertexField = getField(CostVertexPair.class, "vertex");
        costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(3));
        vertexField.set(costVert, null);
        graph = new Graph<>(TYPE.UNDIRECTED, new ArrayList<>(), directedGraph.edges);
        graph = new Graph<>(TYPE.UNDIRECTED, new UndirectedGraph().verticies, new UndirectedGraph().edges);
        AStar<Integer> astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new DirectedGraph().v5);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v1, new DirectedGraph().v7);
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getEdges().add(new Edge<Integer>(4, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(3));
        graph.getVertices().add(new Vertex<Integer>(4));
        vertex = new Vertex<Integer>(2, 3);
        vertex.addEdge(new Edge<Integer>(4, vertex, vertex));
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v5, new DirectedGraph().v8);
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v2, new DirectedGraph().v6);
        edge = new Edge<Integer>(3, new Vertex<Integer>(4), new Vertex<>(5));
        graph = new Graph<>();
        graph.getEdges().add(new Edge<Integer>(3, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph.getVertices().add(new Vertex<Integer>(4));
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new DirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v7, new UndirectedGraph().v1);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v5);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v7);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new UndirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v3);
        astar = new AStar<Integer>();
        edges = (ArrayList<Edge<Integer>>) astar.aStar(new DirectedGraph().graph, new UndirectedGraph().v3, new UndirectedGraph().v3);
        assertEquals(0, edges.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest80() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directed.e1_3);
        list.add(directed.e3_6);
        list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
        return (new Graph.CostPathPair<Integer>(cost, list));
        DirectedGraph directedGraph = new DirectedGraph();
        Graph<Integer> graph = directedGraph.graph;
        Graph<Integer> graph2 = new Graph<Integer>(graph);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        graph2 = new Graph<Integer>(graph);
        graph2.getVertices().remove(0);
        graph2.getVertices().add(new Vertex<>(2333));
        graph2 = new Graph<>(graph);
        graph2.getEdges().remove(0);
        graph2.getEdges().add(new Edge<Integer>(233, new Vertex<Integer>(1), new Vertex<Integer>(2)));
        ArrayList<Edge<Integer>> edges = new ArrayList<>(graph.getEdges());
        for (int i = 0; i < graph.getEdges().size(); i++)
            edges.add(graph.getEdges().get(i));
        graph2 = new Graph<>(TYPE.DIRECTED, graph.getVertices(), edges);
        Vertex<Integer> vertex = new Vertex<>(12);
        Vertex<Integer> vertex1 = new Vertex<>(12);
        Edge<Integer> edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(13);
        Edge<Integer> edge2 = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex1, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        edge2 = new Edge<>(1, vertex, vertex1);
        edge = new Edge<>(1, vertex, vertex);
        vertex = new Vertex<>(12);
        vertex1 = new Vertex<>(12);
        edge = new Edge<>(1, vertex1, vertex);
        vertex.getEdges().add(edge);
        vertex1.getEdges().add(new Edge<>(2, vertex1, vertex));
        CostPathPair<Integer> pathpair = getIdealPathPair(directedGraph);
        CostPathPair<Integer> pathpair1 = getIdealPathPair(directedGraph);
        pathpair1.setCost(-10000);
        pathpair1 = getIdealPathPair(directedGraph);
        ArrayList<Edge<Integer>> path = new ArrayList<Edge<Integer>>();
        path.add(new Edge<Integer>(1, vertex, vertex));
        ArrayList<Edge<Integer>> path1 = new ArrayList<Edge<Integer>>();
        path1.add(new Edge<Integer>(2, vertex, vertex));
        CostPathPair<Integer> costPair = new CostPathPair<Integer>(123, path);
        CostPathPair<Integer> costPair1 = new CostPathPair<Integer>(123, path1);
        CostVertexPair<Integer> costVert = new CostVertexPair<Integer>(2, new Vertex<Integer>(2));
            costVert = new CostVertexPair<Integer>(2, null);
            fail();
}

@org.junit.Test(timeout = 4000)
public void testAStarTest81() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(list0, list1);
        org.junit.Assert.assertTrue(graph1.equals(((java.lang.Object) (graph0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest82() {
        org.dom4j.Namespace namespace0 = new org.dom4j.Namespace("net.mooctest.Graph$CostPathPair", "");
        org.dom4j.bean.BeanElement beanElement0 = new org.dom4j.bean.BeanElement("getByte", namespace0, "");
        org.dom4j.bean.BeanAttributeList beanAttributeList0 = new org.dom4j.bean.BeanAttributeList(beanElement0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(beanAttributeList0, list0);
            graph1.hashCode();
            org.junit.Assert.fail("Expecting exception: ClassCastException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest83() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-14), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest84() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1032), graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest85() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest86() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        org.junit.Assert.assertEquals((-2526), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest87() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge1.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals((-1), graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest88() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge1.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest89() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex1);
        org.junit.Assert.assertEquals(799, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest90() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1881));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex1);
        org.junit.Assert.assertEquals((-1881), graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest91() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(graph0);
        org.junit.Assert.assertTrue(graph1.equals(((java.lang.Object) (graph0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest92() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest93() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
        org.junit.Assert.assertEquals((-1), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest94() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2124, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(java.lang.Integer.MAX_VALUE, graph_Vertex1);
        int int0 = graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
        org.junit.Assert.assertEquals(java.lang.Integer.MAX_VALUE, graph_CostVertexPair1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest95() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        org.junit.Assert.assertFalse(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest96() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest97() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.Integer>(((java.lang.Integer) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex2);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest98() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.Integer>(((java.lang.Integer) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex2);
        org.junit.Assert.assertEquals(0, graph_Vertex2.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest99() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.Integer>(((java.lang.Integer) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex2);
        org.junit.Assert.assertNull(graph_Edge1);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest100() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest101() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest102() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertNull(graph_Edge1);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest103() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest104() {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest105() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        java.lang.String string0 = graph_Vertex0.toString();
        org.junit.Assert.assertEquals("Value= weight=0\n\t[ (0) ] -> [ (0) ] = -895\n", string0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest106() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
        boolean boolean0 = graph0.equals(graph1);
        org.junit.Assert.assertTrue(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest107() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        graph_Vertex2.addEdge(graph_Edge1);
        org.junit.Assert.assertEquals((-4095), graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest108() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        graph_Vertex2.addEdge(graph_Edge1);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertEquals((-4095), graph_Vertex2.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest109() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        graph_Vertex2.addEdge(graph_Edge1);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertEquals((-1), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest110() {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>(graph_TYPE0);
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
        boolean boolean0 = graph1.equals(graph0);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest111() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>((-2879), list0);
        java.lang.Object object0 = new java.lang.Object();
        boolean boolean0 = graph_CostPathPair0.equals(object0);
        org.junit.Assert.assertEquals((-2879), graph_CostPathPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest112() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>((-2879), list0);
        java.lang.Object object0 = new java.lang.Object();
        boolean boolean0 = graph_CostPathPair0.equals(object0);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest113() {
            graph0 = new net.mooctest.Graph<java.lang.String>(((net.mooctest.Graph<java.lang.String>) (null)));
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest114() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("UK4slV]YrZ' jXMmb");
        int int0 = graph_Vertex0.getWeight();
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest115() {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }
    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        modifiersField.setAccessible(true);
        return field;


        systemErrRule.clearLog();
    }
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-2763));
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        // Undeclared exception!
        try {
            aStar0.aStar(graph0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)), graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            // no message in exception (getMessage() returned null)
        }
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest08tokenhaha() throws java.lang.Throwable { // 漏变量
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostVertexPair", e);
    }
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
    }
        graph0.hashCode();
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));
    public void Graph_ESTesttest42tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>(graph_TYPE0);
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
    }
    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
            graph0 = new net.mooctest.Graph<java.lang.String>(((net.mooctest.Graph<java.lang.String>) (null)));
            //
            // no message in exception (getMessage() returned null)
        }
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-2761));
        boolean boolean0 = graph_Vertex0.equals(((java.lang.Object) (null)));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
            // Both 'to' and 'from' vertices need to be non-NULL.
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(2);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_7 = new Graph.Edge<Integer>(1, v1, v7);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            edges.add(e1_2);
            edges.add(e1_3);
            edges.add(e2_4);
            edges.add(e3_4);
            edges.add(e4_5);
            edges.add(e1_7);
        final Graph<Integer> graph = new Graph<Integer>(verticies, edges);
    private static class DirectedGraph { // 静态有向图
        final List<Vertex<Integer>> verticies = new ArrayList<Vertex<Integer>>();
        final Graph.Vertex<Integer> v5 = new Graph.Vertex<Integer>(5);
        final Graph.Vertex<Integer> v6 = new Graph.Vertex<Integer>(6);
        final Graph.Vertex<Integer> v7 = new Graph.Vertex<Integer>(7);

            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest116() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2363, graph_Vertex0);
        int int0 = graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(2363, graph_CostVertexPair1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest117() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2363, graph_Vertex0);
        int int0 = graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest118() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair1 = new net.mooctest.Graph.CostVertexPair<java.lang.String>(2363, graph_Vertex0);
        int int0 = graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest119() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("(", 928);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest120() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("(", 928);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest121() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("(", 928);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(928, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest122() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        org.junit.Assert.assertTrue(graph_Edge1.equals(((java.lang.Object) (graph_Edge0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest123() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge1);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest124() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        java.lang.String string0 = graph_CostVertexPair0.toString();
        org.junit.Assert.assertEquals("9c3o$8-?g| (-1)  cost=-1\n", string0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest125() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-442)).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
}

@org.junit.Test(timeout = 4000)
public void testAStarTest126() {
            graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-33), ((net.mooctest.Graph.Vertex<java.lang.String>) (null)));
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest127() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(16, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(graph_Edge0);
        boolean boolean0 = graph_Edge1.equals(graph_Edge0);
        org.junit.Assert.assertTrue(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest128() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = graph_Edge0.getToVertex();
        org.junit.Assert.assertEquals(2363, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest129() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = graph_Edge0.getToVertex();
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest130() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        org.junit.Assert.assertTrue(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest131() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex1, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex0);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest132() {
            graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2607, ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (null)));
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest133() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex2, graph_Vertex1);
        graph_Vertex1.addEdge(graph_Edge2);
        org.junit.Assert.assertFalse(graph_Vertex2.equals(((java.lang.Object) (graph_Vertex1))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest134() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex2, graph_Vertex1);
        graph_Vertex1.addEdge(graph_Edge2);
        graph_Vertex2.addEdge(graph_Edge1);
        graph_Vertex1.getEdge(graph_Vertex2);
        org.junit.Assert.assertTrue(graph_Vertex2.equals(((java.lang.Object) (graph_Vertex1))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest135() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("g~");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2568), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)))));
        org.junit.Assert.assertNull(list0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest136() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertTrue(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest137() {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }
    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        modifiersField.setAccessible(true);
        return field;


        systemErrRule.clearLog();
    }
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-2763));
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        // Undeclared exception!
        try {
            aStar0.aStar(graph0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)), graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            // no message in exception (getMessage() returned null)
        }
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest08tokenhaha() throws java.lang.Throwable { // 漏变量
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostVertexPair", e);
    }
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-2761));
        graph_Vertex0.setWeight(2370);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
    }
        graph0.hashCode();
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));
    public void Graph_ESTesttest42tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>(graph_TYPE0);
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
    }
    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
            graph0 = new net.mooctest.Graph<java.lang.String>(((net.mooctest.Graph<java.lang.String>) (null)));
            //
            // no message in exception (getMessage() returned null)
        }
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
            // Both 'to' and 'from' vertices need to be non-NULL.
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(2);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_7 = new Graph.Edge<Integer>(1, v1, v7);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            edges.add(e1_2);
            edges.add(e1_3);
            edges.add(e2_4);
            edges.add(e3_4);
            edges.add(e4_5);
            edges.add(e1_7);
        final Graph<Integer> graph = new Graph<Integer>(verticies, edges);
    private static class DirectedGraph { // 静态有向图
        final List<Vertex<Integer>> verticies = new ArrayList<Vertex<Integer>>();
        final Graph.Vertex<Integer> v5 = new Graph.Vertex<Integer>(5);
        final Graph.Vertex<Integer> v6 = new Graph.Vertex<Integer>(6);
        final Graph.Vertex<Integer> v7 = new Graph.Vertex<Integer>(7);

            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest138() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        graph_CostVertexPair0.setCost((-1361));
        org.junit.Assert.assertEquals((-1361), graph_CostVertexPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest139() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        java.lang.String string0 = graph_Vertex0.toString();
        org.junit.Assert.assertEquals("Value=0 weight=2363\n\t[ 0(2363) ] -> [ 0(2363) ] = 2874\n", string0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest140() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertNotNull(list0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest141() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2526));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertEquals(1, list0.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest142() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertFalse(list0.isEmpty());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest143() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Vertex<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Vertex<java.lang.String>>) (graph0.getVertices()));
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list1 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph1 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0, list0, list1);
        org.junit.Assert.assertEquals(net.mooctest.Graph.TYPE.DIRECTED, graph1.getType());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest144() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals((-27), graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest145() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertEquals((-27), graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest146() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-27), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest147() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest148() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest149() {
        java.lang.Integer integer0 = new java.lang.Integer((-1));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge0);
        org.junit.Assert.assertEquals(2363, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest150() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-1460), graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(0, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest151() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-1460), graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest152() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-895), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-1460), graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1460), graph_Edge1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest153() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2155, list0);
        java.lang.String string0 = graph_CostPathPair0.toString();
        org.junit.Assert.assertEquals("Cost = 2155\n", string0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest154() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();
        org.junit.Assert.assertEquals((-1), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest155() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        int int0 = graph_CostVertexPair0.getCost();
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest156() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        org.junit.Assert.assertEquals(java.lang.Integer.MAX_VALUE, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest157() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_CostVertexPair0.getVertex();
        org.junit.Assert.assertEquals((-1), graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest158() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = graph_CostVertexPair0.getVertex();
        org.junit.Assert.assertEquals((-1), graph_CostVertexPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest159() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2536));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2579), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertEquals(1, list0.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest160() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2536));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-2579), graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertNotNull(list0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest161() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2, graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertNotNull(list0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest162() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(2, graph_Vertex0, graph_Vertex1);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
        org.junit.Assert.assertEquals(2, list0.size());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest163() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 2615);
            graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>(837, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)), graph_Vertex0);
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest164() {
        java.lang.Integer integer0 = new java.lang.Integer(2155);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest165() {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
            graph1 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0, ((java.util.Collection<net.mooctest.Graph.Vertex<java.lang.String>>) (null)), list0);
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest166() {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    @org.junit.Test(timeout = 4000)

    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
            //
    }
    }

        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
        int int0 = graph_Edge0.getCost();
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
        final Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> idealDirectedPath = new HashMap<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>>();
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v6, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v5, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_4);
            list.add(directed.e4_7);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v7, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v3, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_4);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v4, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_2);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v2, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            list.add(directed.e6_8);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v8, path);
        return idealDirectedPath;
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        final DirectedGraph directed = new DirectedGraph();
        final Graph.Vertex<Integer> start = directed.v1;
        final Graph.Vertex<Integer> end = directed.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(directed.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealDirectedPath(directed).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest167() {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
    @org.junit.Test(timeout = 4000)

    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
            //
    }
    }

        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
        int int0 = graph_Edge0.getCost();
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
        final Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> idealDirectedPath = new HashMap<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>>();
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v6, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v5, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_4);
            list.add(directed.e4_7);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v7, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v3, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_4);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v4, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_2);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v2, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            list.add(directed.e6_8);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v8, path);
        return idealDirectedPath;
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        final DirectedGraph directed = new DirectedGraph();
        final Graph.Vertex<Integer> start = directed.v1;
        final Graph.Vertex<Integer> end = directed.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(directed.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealDirectedPath(directed).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest168() {

    @org.junit.Test(timeout = 4000) // 为v1设置了一个空边。在计算v1,v0距离时会调用到这个null边，会抛出空边异常。这个样例切的也很不完整
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
        // Undeclared exception!
        try {
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
            //
            // no message in exception (getMessage() returned null)
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.AStar", e);
        }
    }
    @org.junit.Test(timeout = 4000) // a*算法用于获取一个图中一个节点到另外一个节点的全部边。这个用例中，边还没有创建，则v0->v0是不存在的，所以a*算法生成的列表应该为空。
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest01tokenhaha() throws java.lang.Throwable { // 万恶之源
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
    public void AStar_ESTesttest00tokenhaha() throws java.lang.Throwable { // 按照equals的定义，v0,v1是同一个点。切片没正确切出这个逻辑
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("");
            //
            // no message in exception (getMessage() returned null)
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));

    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-943));
    @org.junit.Test(timeout = 4000)

    public void Graph_ESTesttest10tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph<java.lang.String> graph1 = null;
        try {
            //
    }
    }

        graph_CostPathPair0.getPath();
    public void Graph_ESTesttest19tokenhaha() throws java.lang.Throwable {
    }
    public void Graph_ESTesttest03tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.String> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.String>((-1), graph_Vertex0);
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));

    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.lang.String string0 = graph0.toString();
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = null;
        try {
        } catch (java.lang.NullPointerException e) {
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
    }

    public void Graph_ESTesttest06tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);

        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex1.getEdges();
    }
    }
    @org.junit.Test(timeout = 4000)
        int int0 = graph_Edge0.getCost();
    }
        try {
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest12() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Mrx\nS3M^=F7#ei", (-1032));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest11() throws java.lang.Throwable {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
            verticies.add(v7);
            verticies.add(v8);
        }

        final List<Edge<Integer>> edges = new ArrayList<Edge<Integer>>();
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_3 = new Graph.Edge<Integer>(10, v2, v3);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_4 = new Graph.Edge<Integer>(11, v3, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            final int cost = 1;
        final Map<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>> idealDirectedPath = new HashMap<Graph.Vertex<Integer>, Graph.CostPathPair<Integer>>();
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v6, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            list.add(new Graph.Edge<Integer>(9, directed.v6, directed.v5));
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v5, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_4);
            list.add(directed.e4_7);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v7, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v3, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_4);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v4, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_2);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v2, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e1_3);
            list.add(directed.e3_6);
            list.add(directed.e6_8);
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v8, path);
        return idealDirectedPath;
        }
        return idealDirectedNegWeight;
    }
    // Ideal pair
    private Graph.CostPathPair<Integer> getIdealDirectedWithNegWeightsPathPair(DirectedWithNegativeWeights directedWithNegWeights) {
        final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
        list.add(directedWithNegWeights.e4_2);
        final DirectedGraph directed = new DirectedGraph();
        final Graph.Vertex<Integer> start = directed.v1;
        final Graph.Vertex<Integer> end = directed.v8;
            final AStar<Integer> aStar = new AStar<Integer>();
            final List<Graph.Edge<Integer>> path = aStar.aStar(directed.graph, start, end);
            final List<Graph.Edge<Integer>> ideal = getIdealDirectedPath(directed).get(end).getPath();
            assertTrue("A* path error. path=" + path + " idealPathPair=" + ideal, path.equals(ideal));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest169() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex1.compareTo(graph_Vertex0);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest170() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex1.compareTo(graph_Vertex0);
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest171() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex1.compareTo(graph_Vertex0);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest172() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-2763));
        int int0 = aStar0.heuristicCostEstimate(graph_Vertex0, graph_Vertex0);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest173() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge1);
        graph_Vertex1.addEdge(graph_Edge1);
        graph_Vertex2.addEdge(graph_Edge2);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertTrue(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex2))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest174() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("Cannot lookup prefixes in DOM 2", (-4095));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge2 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge1);
        graph_Vertex1.addEdge(graph_Edge1);
        graph_Vertex2.addEdge(graph_Edge2);
        int int0 = graph_Vertex1.compareTo(graph_Vertex2);
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest175() {
        java.lang.Integer integer0 = new java.lang.Integer(2);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2);
        com.github.javaparser.ast.expr.UnaryExpr.Operator unaryExpr_Operator0 = com.github.javaparser.ast.expr.UnaryExpr.Operator.PLUS;
        net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator> graph_Vertex1 = new net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator>(unaryExpr_Operator0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest176() {
        java.lang.Integer integer0 = new java.lang.Integer(2);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2);
        com.github.javaparser.ast.expr.UnaryExpr.Operator unaryExpr_Operator0 = com.github.javaparser.ast.expr.UnaryExpr.Operator.PLUS;
        net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator> graph_Vertex1 = new net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator>(unaryExpr_Operator0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest177() {
        java.lang.Integer integer0 = new java.lang.Integer(2);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2);
        com.github.javaparser.ast.expr.UnaryExpr.Operator unaryExpr_Operator0 = com.github.javaparser.ast.expr.UnaryExpr.Operator.PLUS;
        net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator> graph_Vertex1 = new net.mooctest.Graph.Vertex<com.github.javaparser.ast.expr.UnaryExpr.Operator>(unaryExpr_Operator0);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        org.junit.Assert.assertEquals(2, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest178() {
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.Integer>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
        java.lang.String string0 = graph_Edge0.toString();
        org.junit.Assert.assertEquals("[ null(0) ] -> [ null(0) ] = 2\n", string0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest179() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        org.junit.Assert.assertTrue(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest180() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
        org.junit.Assert.assertFalse(graph_Vertex1.equals(((java.lang.Object) (graph_Vertex0))));
}

@org.junit.Test(timeout = 4000)
public void testAStarTest181() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        boolean boolean0 = graph_Vertex0.pathTo(graph_Vertex1);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest182() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(0, list0);
        int int0 = graph_CostPathPair0.getCost();
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest183() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", 843);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("2<Lz1<N,X{!");
        graph_Vertex1.addEdge(((net.mooctest.Graph.Edge<java.lang.String>) (null)));
            aStar0.distanceBetween(graph_Vertex1, graph_Vertex0);
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest184() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("a");
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex0)));
        org.junit.Assert.assertTrue(list0.isEmpty());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest185() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1), graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest186() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        graph_Edge0.setCost((-1));
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest187() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2874, graph_Edge1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest188() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest189() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-1), graph_Vertex0, graph_Vertex0);
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.Integer>(2874, graph_Vertex1, graph_Vertex1);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2363, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest190() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>((-1), list0);
        graph_CostPathPair0.getPath();
        org.junit.Assert.assertEquals((-1), graph_CostPathPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest191() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-27));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>(graph_Vertex0);
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest192() {
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-2763));
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
            aStar0.aStar(graph0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)), graph_Vertex0);
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest193() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge0.setCost(2146);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2146, graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest194() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge0.setCost(2146);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest195() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertTrue(boolean0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest196() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest197() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals((-1), graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest198() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|", (-1));
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.String>("9c3o$8-?g|");
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest199() {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (graph0.getEdges()));
        net.mooctest.Graph.CostPathPair<java.lang.String> graph_CostPathPair0 = new net.mooctest.Graph.CostPathPair<java.lang.String>(2, list0);
        graph_CostPathPair0.setCost(0);
        org.junit.Assert.assertEquals(0, graph_CostPathPair0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest200() {
        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2294);
        java.lang.Integer integer1 = new java.lang.Integer(799);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, 1);
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(1, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest201() {
        java.lang.Integer integer0 = new java.lang.Integer(897);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2294);
        java.lang.Integer integer1 = new java.lang.Integer(799);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, 1);
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        org.junit.Assert.assertEquals(1, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest202() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 2363);
            graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, ((net.mooctest.Graph.Vertex<java.lang.Integer>) (null)));
            org.junit.Assert.fail("Expecting exception: NullPointerException");
}

@org.junit.Test(timeout = 4000)
public void testAStarTest203() {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }
    private Field getFinalField(Class clazz, String fieldName) throws Throwable {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        modifiersField.setAccessible(true);
        return field;


        systemErrRule.clearLog();
    }
        graph_Vertex0.addEdge(graph_Edge0);
        int int0 = aStar0.distanceBetween(graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.String>("", (-2763));
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
        // Undeclared exception!
        try {
            aStar0.aStar(graph0, ((net.mooctest.Graph.Vertex<java.lang.String>) (null)), graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            // no message in exception (getMessage() returned null)
        }
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex2 = new net.mooctest.Graph.Vertex<java.lang.String>("a", (-2579));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>((-2526), graph_Vertex0, graph_Vertex2);
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.UNDIRECTED;
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
        graph_Vertex0.addEdge(graph_Edge1);
        net.mooctest.AStar<java.lang.String> aStar0 = new net.mooctest.AStar<java.lang.String>();
        java.util.List<net.mooctest.Graph.Edge<java.lang.String>> list0 = ((java.util.List<net.mooctest.Graph.Edge<java.lang.String>>) (aStar0.aStar(graph0, graph_Vertex0, graph_Vertex1)));
    }
    @org.junit.Test(timeout = 4000)
    public void AStar_ESTesttest08tokenhaha() throws java.lang.Throwable { // 漏变量
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(graph_Vertex0);
        net.mooctest.Graph.CostVertexPair<java.lang.Integer> graph_CostVertexPair0 = new net.mooctest.Graph.CostVertexPair<java.lang.Integer>((-1), graph_Vertex1);
        // Undeclared exception!
        try {
            //
            org.evosuite.runtime.EvoAssertions.verifyException("net.mooctest.Graph$CostVertexPair", e);
    }
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2, graph_Vertex0, graph_Vertex0);
    }
        graph0.hashCode();
        boolean boolean0 = graph0.equals(((java.lang.Object) (null)));
    public void Graph_ESTesttest42tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph.TYPE graph_TYPE0 = net.mooctest.Graph.TYPE.DIRECTED;
        net.mooctest.Graph<java.lang.Integer> graph0 = new net.mooctest.Graph<java.lang.Integer>(graph_TYPE0);
        net.mooctest.Graph<java.lang.Integer> graph1 = new net.mooctest.Graph<java.lang.Integer>();
    }
    public void Graph_ESTesttest41tokenhaha() throws java.lang.Throwable {
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>(graph_TYPE0);
    }
    @org.junit.Test(timeout = 4000)
    public void Graph_ESTesttest09tokenhaha() throws java.lang.Throwable {
            graph0 = new net.mooctest.Graph<java.lang.String>(((net.mooctest.Graph<java.lang.String>) (null)));
            //
            // no message in exception (getMessage() returned null)
        }
        net.mooctest.Graph<java.lang.String> graph0 = new net.mooctest.Graph<java.lang.String>();
    }
    public void Graph_ESTesttest37tokenhaha() throws java.lang.Throwable {
        java.lang.Integer integer0 = java.lang.Integer.getInteger(((java.lang.String) (null)), (-2761));
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        java.lang.Integer integer1 = new java.lang.Integer(980);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer1, (-2761));
        int int0 = graph_Vertex0.compareTo(graph_Vertex1);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(2363, graph_Vertex0, graph_Vertex0);
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
            // Both 'to' and 'from' vertices need to be non-NULL.
    @org.junit.Test(timeout = 4000)
        java.lang.Integer integer0 = new java.lang.Integer(2);
        boolean boolean0 = graph_Vertex0.equals(graph_Vertex1);
        final Graph.Edge<Integer> e1_6 = new Graph.Edge<Integer>(14, v1, v6);
        final Graph.Edge<Integer> e2_4 = new Graph.Edge<Integer>(15, v2, v4);
        final Graph.Edge<Integer> e3_6 = new Graph.Edge<Integer>(2, v3, v6);
        final Graph.Edge<Integer> e4_5 = new Graph.Edge<Integer>(6, v4, v5);
        final Graph.Edge<Integer> e1_7 = new Graph.Edge<Integer>(1, v1, v7);
        final Graph.Edge<Integer> e1_8 = new Graph.Edge<Integer>(1, v1, v8);
            edges.add(e1_2);
            edges.add(e1_3);
            edges.add(e2_4);
            edges.add(e3_4);
            edges.add(e4_5);
            edges.add(e1_7);
        final Graph<Integer> graph = new Graph<Integer>(verticies, edges);
    private static class DirectedGraph { // 静态有向图
        final List<Vertex<Integer>> verticies = new ArrayList<Vertex<Integer>>();
        final Graph.Vertex<Integer> v5 = new Graph.Vertex<Integer>(5);
        final Graph.Vertex<Integer> v6 = new Graph.Vertex<Integer>(6);
        final Graph.Vertex<Integer> v7 = new Graph.Vertex<Integer>(7);

            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
        }
            final int cost = 0;
            final Graph.CostPathPair<Integer> path = new Graph.CostPathPair<Integer>(cost, list);
            idealDirectedPath.put(directed.v1, path);
        {
            final int cost = 25;
            final List<Graph.Edge<Integer>> list = new ArrayList<Graph.Edge<Integer>>();
            list.add(directed.e6_8);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest204() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.getCost();
        org.junit.Assert.assertEquals(783, graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest205() {
        java.lang.Integer integer0 = new java.lang.Integer(783);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, 783);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>(799, graph_Vertex0, graph_Vertex0);
        int int0 = graph_Edge0.getCost();
        org.junit.Assert.assertEquals(799, int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest206() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        org.junit.Assert.assertEquals((-1), graph_Edge0.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest207() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertNull(graph_Edge1);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest208() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals(0, graph_Vertex1.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest209() {
        java.lang.Integer integer0 = new java.lang.Integer(0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex0 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0, (-1361));
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.Integer>((-1), graph_Vertex0, graph_Vertex0);
        graph_Vertex0.addEdge(graph_Edge0);
        net.mooctest.Graph.Vertex<java.lang.Integer> graph_Vertex1 = new net.mooctest.Graph.Vertex<java.lang.Integer>(integer0);
        net.mooctest.Graph.Edge<java.lang.Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
        org.junit.Assert.assertEquals((-1361), graph_Vertex0.getWeight());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest210() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-1009), 21000).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals((-1009), int0);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest211() {
        } catch (java.lang.NullPointerException e) {
            //
            // vertex cannot be NULL.
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        org.evosuite.shaded.org.mockito.Mockito.doReturn((-1009), 21000).when(graph_Vertex0).compareTo(org.evosuite.shaded.org.mockito.ArgumentMatchers.nullable(net.mooctest.Graph.Vertex.class));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        int int0 = graph_Edge0.compareTo(graph_Edge1);
        int int1 = graph_Edge1.compareTo(graph_Edge1);
        org.junit.Assert.assertEquals(21000, int1);
}

@org.junit.Test(timeout = 4000)
public void testAStarTest212() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge1.setCost(2269);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertEquals(2269, graph_Edge1.getCost());
}

@org.junit.Test(timeout = 4000)
public void testAStarTest213() {
        net.mooctest.Graph.Vertex<java.lang.String> graph_Vertex0 = ((net.mooctest.Graph.Vertex<java.lang.String>) (org.evosuite.shaded.org.mockito.Mockito.mock(net.mooctest.Graph.Vertex.class, new org.evosuite.runtime.ViolatedAssumptionAnswer())));
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge0 = new net.mooctest.Graph.Edge<java.lang.String>((-4095), graph_Vertex0, graph_Vertex0);
        net.mooctest.Graph.Edge<java.lang.String> graph_Edge1 = new net.mooctest.Graph.Edge<java.lang.String>(graph_Edge0);
        graph_Edge1.setCost(2269);
        boolean boolean0 = graph_Edge0.equals(graph_Edge1);
        org.junit.Assert.assertFalse(boolean0);
}


